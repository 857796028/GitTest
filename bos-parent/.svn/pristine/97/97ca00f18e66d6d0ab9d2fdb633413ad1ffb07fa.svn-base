package com.itheima.bos.dao.base.impl;
import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.List;

import javax.annotation.Resource;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Projections;
import org.springframework.orm.hibernate5.support.HibernateDaoSupport;
import com.itheima.bos.dao.base.IBaseDao;
import com.itheima.bos.utils.PageBean;
/**
 * 持久层通用实现
 * @author zhaoqx
 *
 * @param <T>
 */
public class BaseDaoImpl<T> extends HibernateDaoSupport implements IBaseDao<T> {
	//代表的是某个实体的类型
	private Class<T> entityClass;
	
	@Resource//根据类型注入spring工厂中的会话工厂对象sessionFactory
	public void setMySessionFactory(SessionFactory sessionFactory){
		super.setSessionFactory(sessionFactory);
	}
	
	//在父类（BaseDaoImpl）的构造方法中动态获得entityClass
	public BaseDaoImpl() {
		System.out.println(this.getClass().getName()+"已经运行到这里了");
		//System.out.println("项目运行到BaseDaoImpl这里了"+System.currentTimeMillis());
		ParameterizedType superclass = (ParameterizedType) this.getClass().getGenericSuperclass();
		//获得父类上声明的泛型数组
		Type[] actualTypeArguments = superclass.getActualTypeArguments();
		entityClass = (Class<T>) actualTypeArguments[0];
	}
	
	public void save(T entity) {
		this.getHibernateTemplate().save(entity);
	}
	
	public void delete(T entity) {
		this.getHibernateTemplate().delete(entity);
	}
	
	public void update(T entity) {
		this.getHibernateTemplate().update(entity);
	}

	public T findById(Serializable id) {
		return this.getHibernateTemplate().get(entityClass, id);
	}

	public List<T> findAll() {
		String hql = "FROM " + entityClass.getSimpleName();
		return (List<T>) this.getHibernateTemplate().find(hql);
	}

	@Override //执行更新
	public void executeUpdate(String queryName, Object... objects) {
		// TODO Auto-generated method stub
		//queryName是更新语句的名字 写在映射文件当中
		Session session = this.getSessionFactory().getCurrentSession();
		Query query = session.getNamedQuery(queryName);
		//Query query2 = session.createQuery("UPDATE ....");也是hql语句
		//为HQL语句中的?赋值 多个?
		//int length = objects.length;//问号的多少
		int i = 0;
		for(Object object:objects){
			query.setParameter(i++, object);//计数器赋值
			
		}
		query.executeUpdate();//循环完毕后就执行更新操作
		
	}

	/**
	 * 通用分页查询方法 当程序执行到这里的时候 PageBean里面已经封装了一些参数
	 * currentPage页面发送请求时 提交的参数  也就是page的值
	 * pageSize 也就是页面发送请求的值rows的值
	 * Detached是在action中封装的
	 * 
	 */
	
	public void pageQuery(PageBean pageBean) {
		int currentPage = pageBean.getCurrentPage();
		int pageSize = pageBean.getPageSize();
		DetachedCriteria detachedCriteria = pageBean.getDetachedCriteria();
		
		
		//查询total:总数据量  slect count(*) from bc_staff;如果不设置的话 SQL就为select * from bc_staff;
		
		detachedCriteria.setProjection(Projections.rowCount());//指定hibernate框架发送出SQL的形式为--select count(*) from bc_staff;
		List<Long> countList = (List<Long>) this.getHibernateTemplate().findByCriteria(detachedCriteria); //应该发送的SQL  select count(*) from bc_staff;
	    Long count = countList.get(0);
	    pageBean.setTotal(count.intValue());//总的数据量已经知道
		
		
	    //查询rows:当前页需要展示的数据集合 发送的SQL为:select * from bc_staff limit ?,?
	     detachedCriteria.setProjection(null); //指定hibernate框架发送出的SQL形式为:select * from bc_staff; 
	    //指定hibernate框架封装对象的方式为第2种,就是上图的将Region可以封装到Subarea对象的那种试
	     detachedCriteria.setResultTransformer(DetachedCriteria.ROOT_ENTITY);
	     
	     int firstResult = (currentPage-1)*pageSize;
		 int maxResults = pageSize;
		 List rows = this.getHibernateTemplate().findByCriteria(detachedCriteria, firstResult, maxResults);
		 pageBean.setRows(rows);
	    
	}

	@Override
	public void saveOrUpdate(T entity) {
		// TODO Auto-generated method stub
		this.getHibernateTemplate().saveOrUpdate(entity);	}
}
