package com.itheima.bos.web.action;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.itheima.bos.domain.Region;
import com.itheima.bos.domain.Subarea;
import com.itheima.bos.service.ISubareaService;
import com.itheima.bos.web.action.base.BaseAction;
@Controller
@Scope("prototype")
public class SubareaAction extends BaseAction<Subarea>{
  @Resource
  private ISubareaService subareaService;
	
	/**
	 * 添加分区
	 */
   public String add() throws Exception {
	// TODO Auto-generated method stub
	 subareaService.save(model);
	
	return LIST; //保存之后希望能够刷新页面
	
  }
   /**
    * 分页查询
    * 由于是转pageBean考虑哪些字段需要去掉,因此,首先看staffAction中哪些字段去掉了?
    * 由于页面需要展示省市区 于是region不去去掉  由于定区decidedzone用不上,于是转json去掉
    * 由于region关联Subarea ,region不去掉,那么subarea需要去掉,否则是死循环
    */
   public  String pageQuery(){
	   DetachedCriteria dc = pageBean.getDetachedCriteria();
	   //System.out.println(model);
	   //动态添加过滤条件
	   String addresskey = model.getAddresskey();
	   if(StringUtils.isNotBlank(addresskey)) { //添加过滤条件,根据地址条件 模糊查询
		   dc.add(Restrictions.like("addresskey", "%"+addresskey+"%"));
	   }
	   
	   Region region = model.getRegion(); //省市区,不是分区表里面的 而是区域表里面的
	   if(region != null){
		   String province = region.getProvince();
		   String city = region.getCity();
		   String district = region.getDistrict();
		   dc.createAlias("region", "r");
		   if(StringUtils.isNotBlank(province)){
			   //在Subarea里面有一个region   在region里面有province的属性   province不再分区Subarea表里
			   //   dc.add(Restrictions.like("region.province", "%"+province+"%")); //这样写是错误的
			   //这里面涉及到多表关联查询,w使用别名方式实现
			   // dc.查的是分区subarea那张表(subarea.class)
			   //参数1:分区对象中关联的区域对象属性名称 
			   //参数2:另名,可以任意
			   //dc.createAlias("region", "r");  这个条件可以提到if的外面,因为都是region区域,所以可以这样作
			   dc.add(Restrictions.like("r.province", "%"+province+"%"));
		   }
		   if(StringUtils.isNotBlank(city)){
			   
			   dc.add(Restrictions.like("r.city", "%"+city+"%"));
		   }
		   if(StringUtils.isNotBlank(district)){
			  
			   dc.add(Restrictions.like("r.district", "%"+district+"%"));
		   }
		   
	   }
	   
	   
	   subareaService.pageQuery(pageBean);
	   this.java2json(pageBean, new String[]{"currentPage","detachedCriteria","pageSize","decidedzone","subareas"});
	  return NONE; 
   }
   /**
    * 分区数据的导出功能
    */
   
   public String exportXlm(){
	   //第1步:查询分区的所有的数据
	   //第2步:使用POI将数据写到Excel文件中
	   //第2步:使用输出流进行文件下载
	   return NONE; //通过输出流,向回写文件
   }

}

